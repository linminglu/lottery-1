



首先 npm int

npm install --save-dev babel-cli babel-preset-es2015 rimraf


宕机的保存 ： 
1.用户的新投注() 和 
2.保存每期赢钱的数据，在重新启动的时候，发送已经赢钱的数据给服务中心，还有引出可以查看赢钱的数据


投注邏輯：
1.用戶投注
2.本服務保存投注
3.發送服務中心
4.服务中心返回，更新已经发送该数据
5.開獎,发放奖金 （giveBonus）


使用的数据库：
1.PreBonusOrder  下注订单
2.lotteryrecords 游戏开奖数据记录 （何时开奖）
3.XXXX_receive   返回记录
4.prebonusorders 中奖纪录
5.prepayorders   下注记录

发送服务器中心数据的JOSN格式:
{
	create_time:'',
	event:'',
	token:'',
	dev_key:'',
	data:{ // 放要发送的数据

	}
}

返回服务器中心数据的JSON格式：
{
	code:200,
	status:'SUCCESS',
	msg:{
		success_list:[],
		error_list:[]
	}
}


测试服务中心和本服务器的交互数据的准确性：

100个机器人，有三种彩票可投注，每个机器人都投注不同的彩票，定时每一秒投注次数为1次，定时3次，100*3*3=900？？？？
为什么会产生1600条的数据呢？？


测试项目：

1.目前游戏服务器发送数据全部能收到，这里是正常没有任何情况之下。（3月30日）

2.服务器重启发送未发送信息。

3.服务器更新的停止运行方法。（维护时的处理）

4.获取不了本期的结果的做法。

5.保证游戏服务数据和大厅收到的一致。


赢的信息是游戏服务器计算出来，更新到





//////////////////////////////////////////////////////////////////////////////////////////////
/// 客户端通讯协议

彩票系统需求
1、配置数据(每种游戏对应的玩法、每种玩法对应的投注内容和奖金)
	
2、通信协议
{
	客户端请求
	1、登陆
	请求参数
	{
		彩源类型
		游戏类型
		用户id
	}
	返回参数
	{
		用户基本信息（昵称、资金等）
	}
	2、投注
	请求参数
	{
		游戏类型
		投注类型
		投注金额
	}
	返回参数
	{
		投注是否成功
	}
	3、开启挂机
	请求参数为空
	{
		是否开启成功
	}
	4、取消挂机
	请求参数为空
	{
		是否取消成功
	}
	5、退出游戏
	服务器推送
	1、近期开奖记录（登陆后推送一次）
	2、玩家个人最新一期投注记录（登陆后推送一次）
	3、在线玩家列表
	4、最新开奖数据（同一种彩源下的游戏用户都需要广播）
	5、广播同一个游戏的所有玩家投注